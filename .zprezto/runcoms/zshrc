#
# Executes commands at the start of an interactive session.
#
# Authors:
#   Sorin Ionescu <sorin.ionescu@gmail.com>
#

# Source Prezto.
if [[ -s "${ZDOTDIR:-$HOME}/.zprezto/init.zsh" ]]; then
  source "${ZDOTDIR:-$HOME}/.zprezto/init.zsh"
fi

# Customize to your needs...

function command_stat {
history|awk '{print $2}'|awk 'BEGIN {FS="|"} {print $1}'|sort|uniq -c|sort -r
}

function prx() {
    pwd=`pwd`
    cd /home/bernat/git/reco/CustomizeEar
    ./customize-prod-ear.sh $1 customize-js4-api -Djs4api-hud=true -Djs4api-domengine=true
    rm -v -rf /home/bernat/git/jsapi/proxy/$1
    cp -v -a TmpDir/js/$1 /home/bernat/git/jsapi/proxy
    chmod -v  -R 777  /home/bernat/git//jsapi/proxy
    killall -9 mitmproxy 
    which mitmproxy
    echo "Press [any] key to start"
    read -n 1
    mitmproxy -v -p 3333 --replace ":.*:api.worldgravity.com/js/:localhost/jsapi/proxy/" \
                      --replace ":.*:saas.gravityrd.com/js/:localhost/jsapi/proxy/" \
                      --replace ":.*:gr_reco4-min:gr_reco4" 
    cd "$pwd"
}

# ssh wrapper that rename current tmux window to the hostname of the
# remote host.
ssh() {
    # Do nothing if we are not inside tmux or ssh is called without arguments
    if [[ $# == 0 || -z $TMUX ]]; then
        command ssh $@
        return
    fi
    # The hostname is the last parameter (i.e. ${(P)#})
    local remote=${${(P)#}%.*}
    local old_name="$(tmux display-message -p '#W')"
    local renamed=0
    # Save the current name
    if [[ $remote != -* ]]; then
        renamed=1
        tmux rename-window $remote
    fi
    command ssh $@
    if [[ $renamed == 1 ]]; then
        tmux rename-window "$old_name"
    fi
}

# apparix
# {{{
# this is take from the apparix shell-examples for bash so well
# need bash complete
autoload bashcompinit
bashcompinit
# from apparix shell-examples
to () {
if test "$2"; then
cd "$(apparix "$1" "$2" || echo .)";
else
cd "$(apparix "$1" || echo .)";
fi
pwd
}
bm () {
if test "$2"; then
apparix --add-mark "$1" "$2";
elif test "$1"; then
apparix --add-mark "$1";
else
apparix --add-mark;
fi
}
portal () {
if test "$1"; then
apparix --add-portal "$1";
else
apparix --add-portal;
fi
}
# function to generate list of completions from .apparixrc
_apparix_aliases ()
{   cur=$2
dir=$3
COMPREPLY=()
if [ "$1" == "$3" ]
then
COMPREPLY=( $( cat $HOME/.apparix{rc,expand} | \
grep "j,.*$cur.*," | cut -f2 -d, ) )
else
dir=`apparix -favour rOl $dir 2>/dev/null` || return 0
eval_compreply="COMPREPLY=( $(
cd "$dir"
\ls -d *$cur* | while read r
do
[[ -d "$r" ]] &&
[[ $r == *$cur* ]] &&
echo \"${r// /\\ }\"
done
) )"
eval $eval_compreply
fi
return 1
}
# zstyle :completion:*:to:* completer _apparix_aliases
# command to register the above to expand when the tos commands args are
# being expanded
complete -F _apparix_aliases to
# }}}

alias g='git'
complete -o default -o nospace -F _git g
alias pi="sudo pacman -S"
alias yi="yaourt -S"
alias lsa="la -alth"
alias b="(to reco grrec;  ant dist) "
alias cb="(to reco grrec;  ant clean dist)"
connect_via_mosh(){
 mosh $1 -- tmux attach || mosh $1 -- tmux
}
connect_via_ssh(){
 ssh $1 -- tmux attach || ssh $1 -- tmux
}
alias m=connect_via_mosh
alias s=connect_via_ssh
alias cp='acp -g'
alias mv='amv -g'
